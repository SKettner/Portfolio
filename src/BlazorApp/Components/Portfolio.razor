<section class="light" id="portfolio">
    <h2>Portfolio</h2>
    <div class="portfolio-container">
    @if (projects is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="portfolio-hero">
            @if (hero is not null)
            {
                <img src="@(hero.Src)" style="height: 90%; width: 100%; object-fit: cover;" 
                    alt="@(hero.Alt)" />
            }
        </div>
        <div class="container">
            <h3>Career</h3>
            <h3></h3>
            @foreach (var career in careers)
            {
                <div class="box" key="@career.Title">
                    <a href="@career.Url" target="_blank" rel="noopener noreferrer">
                        <h3 style="flex-basis: 40px;">@career.Title</h3>
                    </a>
                    <p class="small">@career.Description</p>
                </div>
            }
            <h3>Writing Sample</h3>
            <h3></h3>
            @foreach (var writingSample in writingSamples)
            {
                <div class="box" key="@writingSample.Title">
                    <a href="@writingSample.Url" target="_blank" rel="noopener noreferrer">
                        <h3 style="flex-basis: 40px;">@writingSample.Title</h3>
                    </a>
                    <p class="small">@writingSample.Description</p>
                </div>
            }
            <h3>Projects</h3>
            <h3></h3>
            @foreach (var project in projects)
            {
                <div class="box" key="@project.Title">
                    <a href="@project.Url" target="_blank" rel="noopener noreferrer">
                        <h3 style="flex-basis: 40px;">@project.Title</h3>
                    </a>
                    <p class="small">@project.Description</p>
                </div>
            }
        </div>
    }
    </div>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private List<Project>? projects;
    private List<Project>? careers;
    private List<Project>? writingSamples;
    private HeroImage? hero;

    protected override async Task OnInitializedAsync()
    {
        careers = await Http.GetFromJsonAsync<List<Project>>("sample-data/career.json");
        writingSamples = await Http.GetFromJsonAsync<List<Project>>("sample-data/writingSample.json");
        projects = await Http.GetFromJsonAsync<List<Project>>("sample-data/projects.json");
        hero = await HeroImageService.GetHeroAsync(img => img.Name is "portfolio");
    }
}
